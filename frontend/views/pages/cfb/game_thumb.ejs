<% 

        function generateTeamImg(teamId) {
            return `<img class="img-fluid d-inline-block team-logo-${teamId}" width="30px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/${teamId}.png" alt="ESPN team id ${teamId}"/>`;
        }

        function formatScore(score, winner, complete) {
            if (winner && complete) {
                return `<strong>${score}</strong>`
            } else if (!winner && complete) {
                return `<span style="opacity: 0.5;">${score}</span>`
            } else {
                return `<span>${score}</span>`
            }
        }

        const SPICE_LEVEL = {
            WATER: "testing",
            BELL: "none",
            SERRANO: "close-late",
            CAYENNE: "ranked-upset",
            GHOST: "ranked-close-late",
            REAPER: "fcs-upset"
        }
        const fbs = ['1','4','5','8','9','12','15','17','37','151','80', '18'];

        function cleanScore(comp) {
            return (typeof(comp.score) == 'object') ? parseInt(comp.score.displayValue) : parseInt(comp.score)
        }
        
        function calculateSpiceLevel(g) {
            // const levels = Object.keys(SPICE_LEVEL);
            // let randIndex = Math.floor(Math.random() * levels.length);
            // return SPICE_LEVEL[levels[randIndex]];

            g.scores = {};
            g.scores.home = cleanScore(g.competitions[0].competitors[0]);
            g.scores.away = cleanScore(g.competitions[0].competitors[1]);
            g.homeTeam = g.competitions[0].competitors[0];
            g.awayTeam = g.competitions[0].competitors[1];
            g.situation = g.competitions[0].situation;
            
            if (g.status.type.completed == true || parseInt(g.status.period) < 1) {
                return SPICE_LEVEL.BELL;
            }

            if ((parseInt(g.status.period) == 2 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 38))
                || (parseInt(g.status.period) == 3 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 28))
                || (parseInt(g.status.period) == 4 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 22))) {
                return SPICE_LEVEL.BELL; // garbage time
            }
            //
            var isLateInHalf = (g.status.type.name.includes("STATUS_IN_PROGRESS") || g.status.type.name.includes("STATUS_HALFTIME")) && (parseInt(g.status.period) > 4) || (parseInt(g.status.period) == 2 && parseInt(g.status.clock) <= 300 && parseInt(g.status.clock) > 0) || (parseInt(g.status.period) == 4 && parseInt(g.status.clock) <= 300 && parseInt(g.status.clock) > 0);
            var isMiddleHalf = g.status.type.name.includes("STATUS_IN_PROGRESS") && (parseInt(g.status.period) >= 3 && parseInt(g.status.clock) <= 450 && parseInt(g.status.clock) > 0);
            var isEarlyGame = g.status.type.name.includes("STATUS_IN_PROGRESS") && (parseInt(g.status.period) == 1 && parseInt(g.status.clock) >= 450);

            var oneScoreDriveTime = ((parseInt(g.status.clock) % 900) >= 60);
            var twoScoreDriveTime = ((parseInt(g.status.clock) % 900) >= 120);
            var oneScorePossibleByTrailingTeam = (oneScoreDriveTime && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 0 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) <= 8));
            var twoScoresPossibleByTrailingTeam = (twoScoreDriveTime && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 9 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) <= 16));
            var fbsVsFcsGame = ((!fbs.includes(g.homeTeam.team.conferenceId) && fbs.includes(g.awayTeam.team.conferenceId)) || (!fbs.includes(g.awayTeam.team.conferenceId) && fbs.includes(g.homeTeam.team.conferenceId)))
            var homeFcsLeading = (!fbs.includes(g.homeTeam.team.conferenceId) && fbs.includes(g.awayTeam.team.conferenceId) && (parseInt(g.scores.home) - parseInt(g.scores.away)) >= 0);
            var awayFcsLeading = (fbs.includes(g.homeTeam.team.conferenceId) && !fbs.includes(g.awayTeam.team.conferenceId) && (parseInt(g.scores.home) - parseInt(g.scores.away)) <= 0)

            if ((isMiddleHalf && (oneScorePossibleByTrailingTeam || twoScoresPossibleByTrailingTeam)) && ((g.homeTeam.rank < 26 && g.awayTeam.rank > 25)
            || (g.awayTeam.rank < 26 && g.homeTeam.rank > 25))) {
                return SPICE_LEVEL.CAYENNE;
            }
            
            if (!isEarlyGame && fbsVsFcsGame && (homeFcsLeading || awayFcsLeading)) {
                return SPICE_LEVEL.REAPER;
            }
            
            if (isLateInHalf && (oneScorePossibleByTrailingTeam || twoScoresPossibleByTrailingTeam)) {
                if (g.homeTeam.rank < 26 && g.awayTeam.rank < 26) {
                    return SPICE_LEVEL.GHOST;
                } else {
                    return SPICE_LEVEL.SERRANO;
                }
            }
            
            if (isLateInHalf && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 0 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) < 8)) {
                return SPICE_LEVEL.SERRANO;
            }

            return SPICE_LEVEL.BELL;
        }

        const gameComp = game.competitions[0];
        const homeComp = gameComp.competitors[0];
        homeComp.score = cleanScore(homeComp);
        const awayComp = gameComp.competitors[1];
        awayComp.score = cleanScore(awayComp);
        const homeTeam = homeComp.team;
        const awayTeam = awayComp.team;
        const spiceLevel = calculateSpiceLevel(game) || 'none';
%>
<div class="row border rounded m-2 mb-4 spice-level-<%= spiceLevel %>">
    <div class="col p-3">
        <strong class="d-inline-block mb-2 text-primary">
            <% if (game.status.type.name.includes("STATUS_SCHEDULED")) { %>
            <span class="game-date"><%= game.date %></span>
            <% } else if (game.status.type.completed == true) { %>
            <span><%= game.status.type.detail %> -</span> <span class="game-date"><%= game.date %></span>  
            <% } else { %>
            <%= game.status.type.detail %>
            <% } %>
        </strong> 
        <div class="m-0 clearfix">
            <div class="d-flex justify-content-between">
                <div class="text-left">
                    <%- generateTeamImg(awayComp.id) %> <span class="d-inline-block h4"><%- formatScore(awayTeam.abbreviation, parseInt(awayComp.score) > parseInt(homeComp.score), game.status.type.completed == true) %></span>
                </div>
                <div class="text-right">
                    <p class="h4"><%- (game.status.type.name.includes("STATUS_SCHEDULED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone")) ? "" : formatScore(awayComp.score, parseInt(awayComp.score) > parseInt(homeComp.score), game.status.type.completed == true) %></p>
                </div>
            </div>
        </div>
        <div class="m-0 mb-2 clearfix">
            <div class="d-flex justify-content-between">
                <div class="text-left">
                    <%- generateTeamImg(homeComp.id) %> <span class="d-inline-block h4"><%- formatScore(homeTeam.abbreviation, parseInt(awayComp.score) < parseInt(homeComp.score), game.status.type.completed == true) %></span>
                </div>
                <div class="text-right">
                    <p class="h4"><%- (game.status.type.name.includes("STATUS_SCHEDULED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone")) ? "" : formatScore(homeComp.score, parseInt(awayComp.score) < parseInt(homeComp.score), game.status.type.completed == true) %></p>
                </div>
            </div>
        </div>
        <% if (!(game.status.type.completed == true || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone"))) { %>
            <% if (gameComp.situation != null && gameComp.situation.lastPlay != null) { %>
                <div class="card-text mb-2">
                <% if (gameComp.situation.lastPlay.text != null && (gameComp.situation.lastPlay.text.toLocaleLowerCase().includes("two-point conversion") || gameComp.situation.lastPlay.text.includes("KICK"))) { %>
                    <p class="mb-0 text-muted"><strong>Next:</strong> PAT</p>
                    <p class="mb-0 text-muted"><strong>Last Play:</strong> <%= gameComp.situation.lastPlay.text %></p>
                <% } else if (gameComp.situation.lastPlay.text != null && gameComp.situation.lastPlay.text.toLocaleLowerCase().includes("kickoff")) { %>
                    <p class="mb-0 text-muted"><strong>Next:</strong> Kickoff</p>
                    <p class="mb-0 text-muted"><strong>Last Play:</strong> <%= gameComp.situation.lastPlay.text %></p>
                <% } else if (gameComp.situation.downDistanceText == null || (gameComp.situation.downDistanceText != null && gameComp.situation.downDistanceText.length == 0)) { %>
                    <p class="mb-0 text-muted"><strong>Last Play:</strong> <%= gameComp.situation.lastPlay.text %></p>
                <% } else { %>
                    <p class="mb-0 text-muted"><strong>Next:</strong> <%= gameComp.situation.downDistanceText %></p>
                    <p class="mb-0 text-muted"><strong>Last Play:</strong> <%= gameComp.situation.lastPlay.text %></p>
                <% } %>
                </div>
            <% } %>
        <% } %>
        <div class="d-flex justify-content-between">
            <div class="text-left">
                <% let hasLastPlay = (gameComp.situation != null && gameComp.situation.lastPlay != null); %>
                <% if (game.status.type.name.includes("STATUS_SCHEDULED")) { %>
                    <a class="btn btn-sm btn-outline-primary" role="button" href="/cfb/game/<%= game.id %>">Preview</a>
                <% } else { %>
                    <a class="btn btn-sm btn-outline-primary <%= (game.status.type.name.includes("STATUS_DELAYED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone") || (game.status.type.name.includes("STATUS_IN_PROGRESS") && !hasLastPlay)) ? "disabled" : "" %>" role="button" href="/cfb/game/<%= game.id %>">Stats</a>
                <% } %>
            </div>
            <div class="text-right">
                <%
                const networkMappings = {
                    "FOX" : 'https://www.foxsports.com/live',
                    "FS1" : 'https://www.foxsports.com/live/fs1',
                    "FS2" : 'https://www.foxsports.com/live/fs2',
                    "BTN" : 'https://www.foxsports.com/live/btn',
                    "NBC" : 'https://www.nbcsports.com/live',
                    "Peacock" : 'https://www.peacocktv.com',
                    "CBSSN" : 'https://www.cbssports.com/cbs-sports-network/',
                    "CBS" : 'https://www.cbssports.com/live/',
                    'PAC12' : 'https://pac-12.com/live',
                    'NFL NET' : 'https://www.nfl.com/network/watch/nfl-network-live'
                }
                
                %>
                <% 
                if ((gameComp.geoBroadcasts?.length ?? 0) > 0) {
                    if (gameComp.geoBroadcasts[0].media != null && gameComp.geoBroadcasts[0].media.shortName != null) { 
                        let networkName = gameComp.geoBroadcasts[0].media.shortName;

                        if (networkMappings[networkName]) { %>
                            <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="<%= networkMappings[networkName] %>"><%= networkName %></a>
                        <% } else if (networkName.includes('ESPN') || networkName.includes('LHN') || networkName.includes('ACCN') || networkName.includes('SECN') || networkName.includes('BIG12') || networkName.includes('ABC')) { %>
                            <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="https://www.espn.com/watch/player/_/eventCalendarId/<%= gameComp.id %>"><%= networkName %></a>
                        <% } else { %>
                            <span class="badge bg-secondary bg-sm align-self-center"><%= networkName %></span>
                        <% } %>
                    <% } %>
                <% } else if (gameComp.broadcasts.length > 0 && gameComp.broadcasts[0].media != null && gameComp.broadcasts[0].media.shortName != null) {                              
                    let networkName = gameComp.broadcasts[0].media.shortName;
                    if (networkMappings[networkName]) { %>
                        <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="<%= networkMappings[networkName] %>"><%= networkName %></a>
                    <% } else if (networkName.includes('ESPN') || networkName.includes('LHN') || networkName.includes('ACCN') || networkName.includes('SECN') || networkName.includes('BIG12') || networkName.includes('ABC')) { %>
                        <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="https://www.espn.com/watch/player/_/eventCalendarId/<%= gameComp.id %>"><%= networkName %></a>
                    <% } else { %>
                        <span class="badge bg-secondary bg-sm align-self-center"><%= networkName %></span>
                    <% } %>
                <% } %>
            </div>
        </div>
    </div>
</div>