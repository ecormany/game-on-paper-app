<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>College Football | Game on Paper</title>  
        <link href="/assets/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
        <link href="/assets/css/index.css" rel="stylesheet"> 
        <link href="/assets/css/dark-index.css" rel="stylesheet"> 
        <style>
            @media (prefers-color-scheme: dark) { 
        <% scoreboard.forEach(game => {  %>
            <% let gameComp = game.competitions[0];%>
            <%let homeComp = gameComp.competitors[0];%>
            <%let awayComp = gameComp.competitors[1];%>
            <%let homeTeam = homeComp.team;%>
            <%let awayTeam = awayComp.team;%>
            
            img.team-logo-<%= homeTeam.id %> {
                content: url('https://a.espncdn.com/i/teamlogos/ncaa/500-dark/<%= homeTeam.id %>.png') 
            }
            img.team-logo-<%= awayTeam.id %> {
                content: url('https://a.espncdn.com/i/teamlogos/ncaa/500-dark/<%= awayTeam.id %>.png') 
            }
        <% }); %>
        }
        </style>
    </head>
    <body>
        <% 
        // https://stackoverflow.com/questions/8273047/javascript-function-similar-to-python-range
        let range = (start, end) => Array.from(Array(end + 1).keys()).slice(start); 
        let yrRange = range(2002, 2022);
        %>
        <div class="container">
            <div class="row text-center mb-3">
                <div class="form-signin col-12">
                    <h1 class="mb-3 fw-normal">Game on Paper</h1>
                    <form id="game-id-form">
                        <label for="inputGameId" class="visually-hidden">Game ID</label>
                        <input type="text" id="inputGameId" class="form-control mb-3" placeholder="Provide a valid ESPN Game ID for a CFB game" required="">
                        <button class="w-100 btn btn-lg btn-primary" type="submit">View Stats</button>
                    </form>
                </div>
            </div>
            <div class="row mb-1">
                <h3 class="text-center"> -- OR -- </h3>
            </div>
            <form class="form-picker mb-3" id="dropdown-form">
                <div class="row">
                    <div class="col-auto mb-xs-3 mb-sm-0">
                        <select class="form-select form-select-lg" id="yearSelect" onchange="populateWeekSelect();">
                            <option value="-1">Choose Season...</option>
                            <% yrRange.reverse().forEach(yr => { %>
                                <option value="<%= yr %>"><%= yr %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="col-auto mb-xs-3 mb-sm-0">
                        <select class="form-select form-select-lg" id="weekSelect">
                            <option value="-1"<%= (week == null || seasontype == null) ? " selected" : "" %>>Choose Week...</option>
                        </select>
                    </div>
                    <div class="col-auto mb-xs-3 mb-sm-0">
                        <select class="form-select form-select-lg" id="groupSelect">
                            <% groups.forEach(g => { %>
                                <option value="<%= g.id %>" <%= (group == g.id || (group == null && g.id == 80)) ? " selected" : "" %>><%= g.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="col-auto mb-xs-3 mb-sm-0">
                        <button type="submit" class="btn btn-lg btn-primary">View</button>
                    </div>
                </div>
            </form>
            <div class="row mb-3">
                <% 
                function generateTeamImg(teamId) {
                    return `<img class="img-fluid d-inline-block team-logo-${teamId}" width="30px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/${teamId}.png" alt="ESPN team id ${teamId}"/>`;
                }

                function formatScore(score, winner, complete) {
                    if (winner && complete) {
                        return `<strong>${score}</strong>`
                    } else if (!winner && complete) {
                        return `<span style="opacity: 0.5;">${score}</span>`
                    } else {
                        return `<span>${score}</span>`
                    }
                }

                const SPICE_LEVEL = {
                    WATER: "testing",
                    BELL: "none",
                    SERRANO: "close-late",
                    CAYENNE: "ranked-upset",
                    GHOST: "ranked-close-late",
                    REAPER: "fcs-upset"
                }
                
                
                function calculateSpiceLevel(g) {
                    // const levels = Object.keys(SPICE_LEVEL);
                    // let randIndex = Math.floor(Math.random() * levels.length);
                    // return SPICE_LEVEL[levels[randIndex]];

                    g.scores = {};
                    g.scores.home = g.competitions[0].competitors[0].score;
                    g.scores.away = g.competitions[0].competitors[1].score;
                    g.homeTeam = g.competitions[0].competitors[0];
                    g.awayTeam = g.competitions[0].competitors[1];
                    g.situation = g.competitions[0].situation;
                    
                    if (g.status.type.completed == true || parseInt(g.status.period) < 1) {
                        return SPICE_LEVEL.BELL;
                    }

                    if ((parseInt(g.status.period) == 2 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 38))
                    || (parseInt(g.status.period) == 3 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 28))
                    || (parseInt(g.status.period) == 4 && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) > 22))) {
                        return SPICE_LEVEL.BELL; // garbage time
                    }
                    //
                    var isLateInHalf = g.status.type.name.includes("STATUS_IN_PROGRESS") && 
                    (parseInt(g.status.period) > 4) 
                    || (parseInt(g.status.period) == 2 && parseInt(g.status.clock) <= 300 && parseInt(g.status.clock) > 0) 
                    || (parseInt(g.status.period) == 4 && parseInt(g.status.clock) <= 300 && parseInt(g.status.clock) > 0);

                    var isMiddleHalf = g.status.type.name.includes("STATUS_IN_PROGRESS") && (parseInt(g.status.period) >= 3 && parseInt(g.status.clock) <= 450 && parseInt(g.status.clock) > 0);

                    var oneScoreDriveTime = ((parseInt(g.status.clock) % 900) >= 60);
                    var twoScoreDriveTime = ((parseInt(g.status.clock) % 900) >= 120);
                    var oneScorePossibleByTrailingTeam = (oneScoreDriveTime && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 0 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) <= 8));
                    var twoScoresPossibleByTrailingTeam = (twoScoreDriveTime && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 9 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) <= 16));

                    if ((isMiddleHalf && (oneScorePossibleByTrailingTeam || twoScoresPossibleByTrailingTeam)) && ((g.homeTeam.rank < 26 && g.awayTeam.rank > 25)
                    || (g.awayTeam.rank < 26 && g.homeTeam.rank > 25))) {
                        return SPICE_LEVEL.CAYENNE;
                    } else if ((isMiddleHalf && (oneScorePossibleByTrailingTeam || twoScoresPossibleByTrailingTeam)) && ((!fbs.includes(g.homeTeam.conferenceId) && fbs.includes(g.awayTeam.conferenceId)) || (!fbs.includes(g.awayTeam.conferenceId) && fbs.includes(g.homeTeam.conferenceId))) && oneScoreDriveTime) {
                        return SPICE_LEVEL.REAPER;
                    } else if (isLateInHalf && (oneScorePossibleByTrailingTeam || twoScoresPossibleByTrailingTeam)) {
                        if (g.homeTeam.rank < 26 && g.awayTeam.rank < 26) {
                            return SPICE_LEVEL.GHOST;
                        } else {
                            return SPICE_LEVEL.SERRANO;
                        }
                    } else if (isLateInHalf && (Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) >= 0 && Math.abs(parseInt(g.scores.home) - parseInt(g.scores.away)) < 8)) {
                        return SPICE_LEVEL.SERRANO;
                    }

                    return SPICE_LEVEL.BELL;
                }

                %>
                <% if (scoreboard.length > 0) { %>
                    <%
                    scoreboard.forEach(game => { 
                    %>
                    <div class="col-xl-3 col-lg-6">
                        <% 
                                const gameComp = game.competitions[0];
                                const homeComp = gameComp.competitors[0];
                                const awayComp = gameComp.competitors[1];
                                const homeTeam = homeComp.team;
                                const awayTeam = awayComp.team;
                                const spiceLevel = calculateSpiceLevel(game) || 'none';
                        %>
                        <div class="row border rounded m-2 mb-4 spice-level-<%= spiceLevel %>">
                            <div class="col p-3">
                                <strong class="d-inline-block mb-2 text-primary">
                                    <% if (game.status.type.name.includes("STATUS_SCHEDULED")) { %>
                                    <span class="game-date"><%= game.date %></span>
                                    <% } else if (game.status.type.completed == true) { %>
                                    <span><%= game.status.type.detail %> -</span> <span class="game-date"><%= game.date %></span>  
                                    <% } else { %>
                                    <%= game.status.type.detail %>
                                    <% } %>
                                </strong> 
                                <div class="m-0 clearfix">
                                    <div class="d-flex justify-content-between">
                                        <div class="text-left">
                                            <%- generateTeamImg(awayComp.id) %> <span class="d-inline-block h4"><%- formatScore(awayTeam.abbreviation, parseInt(awayComp.score) > parseInt(homeComp.score), game.status.type.completed == true) %></span>
                                        </div>
                                        <div class="text-right">
                                            <p class="h4"><%- (game.status.type.name.includes("STATUS_SCHEDULED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone")) ? "" : formatScore(awayComp.score, parseInt(awayComp.score) > parseInt(homeComp.score), game.status.type.completed == true) %></p>
                                        </div>
                                    </div>
                                </div>
                                <div class="m-0 mb-2 clearfix">
                                    <div class="d-flex justify-content-between">
                                        <div class="text-left">
                                            <%- generateTeamImg(homeComp.id) %> <span class="d-inline-block h4"><%- formatScore(homeTeam.abbreviation, parseInt(awayComp.score) < parseInt(homeComp.score), game.status.type.completed == true) %></span>
                                        </div>
                                        <div class="text-right">
                                            <p class="h4"><%- (game.status.type.name.includes("STATUS_SCHEDULED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone")) ? "" : formatScore(homeComp.score, parseInt(awayComp.score) < parseInt(homeComp.score), game.status.type.completed == true) %></p>
                                        </div>
                                    </div>
                                </div>
                                <% if (!(game.status.type.completed == true || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone"))) { %>
                                    <% if (gameComp.situation != null && gameComp.situation.lastPlay != null) { %>
                                        <p class="card-text text-muted mb-2">
                                        <% if (gameComp.situation.lastPlay.text != null && (gameComp.situation.lastPlay.text.toLocaleLowerCase().includes("two-point conversion") || gameComp.situation.lastPlay.text.includes("KICK"))) { %>
                                            (PAT) <%= gameComp.situation.lastPlay.text %>
                                        <% } else if (gameComp.situation.lastPlay.text != null && gameComp.situation.lastPlay.text.toLocaleLowerCase().includes("kickoff")) { %>
                                            (Kickoff) <%= gameComp.situation.lastPlay.text %>
                                        <% } else if (gameComp.situation.downDistanceText == null || (gameComp.situation.downDistanceText != null && gameComp.situation.downDistanceText.length == 0)) { %>
                                            <%= gameComp.situation.lastPlay.text %>
                                        <% } else { %>
                                            (<%= gameComp.situation.downDistanceText %>) <%= gameComp.situation.lastPlay.text %>
                                        <% } %>
                                        </p>
                                    <% } %>
                                <% } %>
                                <div class="d-flex justify-content-between">
                                    <div class="text-left">
                                        <% let hasLastPlay = (gameComp.situation != null && gameComp.situation.lastPlay != null); %>
                                        <a class="btn btn-sm btn-outline-primary <%= (game.status.type.name.includes("STATUS_DELAYED") || game.status.type.detail.includes("Cancel") || game.status.type.detail.includes("Postpone") || (game.status.type.name.includes("STATUS_IN_PROGRESS") && !hasLastPlay)) ? "disabled" : "" %>" role="button" href="/cfb/game/<%= game.id %>">Stats</a>
                                    </div>
                                    <div class="text-right">
                                        <%
                                        const networkMappings = {
                                            "FOX" : 'https://www.foxsports.com/live',
                                            "FS1" : 'https://www.foxsports.com/live/fs1',
                                            "BTN" : 'https://www.foxsports.com/live/btn',
                                            "NBC" : 'https://www.nbcsports.com/live',
                                            "Peacock" : 'https://www.peacocktv.com',
                                            "CBSSN" : 'https://www.cbssports.com/cbs-sports-network/',
                                            "CBS" : 'https://www.cbssports.com/live/',
                                            'PAC12' : 'https://pac-12.com/live',
                                            'NFL NET' : 'https://www.nfl.com/network/watch/nfl-network-live'
                                        }
                                        
                                        %>
                                        <% if (gameComp.geoBroadcasts.length > 0 && gameComp.geoBroadcasts[0].media != null && gameComp.geoBroadcasts[0].media.shortName != null) { 
                                            let networkName = gameComp.geoBroadcasts[0].media.shortName;

                                            if (networkMappings[networkName]) { %>
                                                <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="<%= networkMappings[networkName] %>"><%= networkName %></a>
                                            <% } else if (networkName.includes('ESPN') || networkName.includes('LHN') || networkName.includes('ACCN') || networkName.includes('SECN') || networkName.includes('BIG12') || networkName.includes('ABC')) { %>
                                                <a class="btn btn-sm btn-outline-secondary" role="button" target="_blank" href="https://www.espn.com/watch/player/_/eventCalendarId/<%= gameComp.id %>"><%= networkName %></a>
                                            <% } else { %>
                                                <span class="badge bg-secondary bg-sm align-self-center"><%= networkName %></span>
                                            <% } %>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                <% } else { %>
                    <p class="text-center text-muted">No games scheduled today.</p>
                <% } %>
            </div>
            <div class="row text-muted">
                <div class="col-12">
                    <caption>Game border color guide: 
                        <ul>
                            <li><strong>Gray</strong> - normal</li>
                            <li><strong>Green</strong> - Close game late</li>
                            <li><strong>Yellow</strong> - Ranked Upset</li>
                            <li><strong>Orange</strong> - Ranked Opponents + close game late</li>
                            <li><strong>Red</strong> - FCS Upset</li>
                        </ul>
                    </caption>
                </div>
            </div>
            <div class="row text-center">
                <%- include('../../partials/footer') %>
            </div>
        </div>
        <%- include('../../partials/scripts') %>
        <script>
            const DateTime = luxon.DateTime;
            function formatDateTime(inputDate) {
                return DateTime.fromISO(inputDate).toLocaleString(DateTime.DATETIME_SHORT)
            }
            var gameDates = document.getElementsByClassName("game-date");
            if (gameDates.length > 0) {
                console.log(gameDates)
                for (var i = 0; i < gameDates.length; i++) {
                    var dateElem = gameDates[i];
                    // console.log(dateElem)
                    dateElem.innerText = formatDateTime(dateElem.innerText)
                }
            } else {
                console.log("no game dates found")
            }
    
            const weekData = <%- JSON.stringify(weekList) %>;
            const selYear = <%- year == null ? "null" : year %>;
            const selWeek = <%- week == null ? "null" : week %>;
            const selSeasonType = <%- seasontype %>;
            const availYearKeys = Object.keys(weekData).reverse(); // as displayed

            function clearSelect(id) {
                var select = document.getElementById(id);
                var length = select.options.length;
                for (i = length-1; i >= 0; i--) {
                    if (parseInt(select.options[i].value) != -1) {
                        select.options[i] = null;
                    }
                }
                select.selectedIndex = 0;
            }

            function populateWeekSelect(val) {
                let yr = val || availYearKeys[0];
                clearSelect("weekSelect")
                console.log("Selected year: " + yr);
                if (parseInt(yr) != -1) {
                    console.log("is valid yr");
                    if (yr == null) {
                        
                        yr = keys[keys.length - 1];
                        console.log("edited yr bc null: " + yr);
                    }
                    let selWeeks = weekData[`${yr}`] || [];
                    console.log("avail weeks: " + selWeeks.length);
                    let weekSelect = document.getElementById("weekSelect");
                    
                    var selIndex = -1;
                    selWeeks.forEach((wk, idx) => {
                        console.log("adding week" + wk.label);
                        if (!wk.label.includes("Bowls")) {
                            var option = document.createElement("option");
                            option.text = wk.label;
                            option.value = `${wk.type};${wk.value}`
                            if (parseInt(selSeasonType) == parseInt("2") && parseInt(selWeek) == parseInt(wk.value)) {
                                selIndex = idx + 1;
                            }
                            
                            weekSelect.add(option);
                        }
                    })

                    var option = document.createElement("option");
                    option.text = "Bowls";
                    option.value = `3;1`
                    if (parseInt(selSeasonType) == parseInt("3")) {
                        selIndex = (selWeeks.length - 1) + 1;
                    }
                    weekSelect.add(option);

                    weekSelect.selectedIndex = selIndex;
                }
            }

            document.getElementById("yearSelect").selectedIndex = 0;
            if (selYear != null) {
                availYearKeys.forEach((yr, idx) => {
                    if (selYear == yr) {
                        console.log("setting selected to yr " + yr + " at idx " + idx);
                        document.getElementById("yearSelect").selectedIndex = idx + 1;
                    }
                });
            }

            populateWeekSelect(selYear || -1);
        </script>
        <script>
            document.getElementById("dropdown-form").addEventListener("submit", function(e) {
                e.preventDefault()
                var year = document.getElementById("yearSelect").value;
                var week = document.getElementById("weekSelect").value;
                var group = document.getElementById("groupSelect").value;
                var baseUrl = "/cfb/"
                if (year != "-1" && week != "-1") {
                    baseUrl += `year/${year}/type/`

                    var cleanWeekItems = week.split(';')
                    let scheduleType = cleanWeekItems[0]
                    let cleanWeek = cleanWeekItems[1]

                    baseUrl += `${scheduleType}/week/${cleanWeek}`
                }

                if (group != null) {
                    baseUrl += `?group=${group}`;
                }

                window.location = baseUrl;
            });
        </script>
    </body>
</html>