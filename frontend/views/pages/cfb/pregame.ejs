<!DOCTYPE html>
<html>
<%
const homeComp = gameData.gameInfo.competitors[0];
const awayComp = gameData.gameInfo.competitors[1];
const homeTeam = homeComp.team;
const awayTeam = awayComp.team;
function getNumberWithOrdinal(n) {
    var s = ["th", "st", "nd", "rd"];
    v = n % 100;
    return n + (s[(v - 20) % 10] || s[v] || s[0]);
}

stat_key_title_mapping = {
    "totalPlays" : "Plays",
    "playsPerGame" : "Plays/Game",
    "totalEPA": "Total EPA",
    "epaPerPlay": "EPA/Play",
    "epaPerGame": "EPA/Game",
    "successRate": "Success Rate",
    "startingFP" : "Starting FP"
}


function roundNumber(value, power10, fixed) {
    return (Math.round(parseFloat(value || 0) * (Math.pow(10, power10))) / (Math.pow(10, power10))).toFixed(fixed)
}

%>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/assets/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link href="/assets/css/dashboard.css" rel="stylesheet">
    <link href="/assets/css/blog.css" rel="stylesheet">
    <link href="/assets/css/dark-game.css" rel="stylesheet"> 
    <link href="/assets/css/bootstrap-icons/bootstrap-icons.css" rel="stylesheet"> 

    <%
    var title = ""
    var subtitle = ""
    if (gameData.gameInfo.status.type.completed == true || gameData.gameInfo.status.type.name.includes("STATUS_IN_PROGRESS")) {
        title = `Game: ${gameData.gameInfo.competitors[1].team.nickname} ${gameData.gameInfo.competitors[1].score}, ${gameData.gameInfo.competitors[0].team.nickname} ${gameData.gameInfo.competitors[0].score} | Game on Paper`
    } else {
        title = `Game: ${gameData.gameInfo.competitors[1].team.nickname} vs ${gameData.gameInfo.competitors[0].team.nickname} | Game on Paper`
    }
    subtitle = `${gameData.gameInfo.competitors[1].team.nickname} vs ${gameData.gameInfo.competitors[0].team.nickname}`;
    %>

    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta http-equiv="x-ua-compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="referrer" content="origin-when-cross-origin">
    <link rel="canonical" href="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <title><%= title %></title>
    <meta name="description" content="Advanced stats for <%= subtitle %>">

    <meta property="og:site_name" content="GameOnPaper.com">
    <meta property="og:url" content="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <meta property="og:title" content="<%= title %>">
    <meta property="og:description" content="Advanced stats for <%= subtitle %>">
    <meta property="og:image" content="https://s.espncdn.com/stitcher/sports/football/college-football/events/<%= gameData.id %>.png?templateId=espn.com.share.1">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:type" content="website">
    <meta name="twitter:site" content="Game on Paper">
    <meta name="twitter:url" content="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <meta name="twitter:title" content="<%= title %>">
    <meta name="twitter:description" content="<%= subtitle %>">
    <meta name="twitter:card" content="summary">
    <meta name="title" content="<%= title %>">
    <meta name="medium" content="website">
</head>
<body>
    <div class="container-fluid">
        <header class="blog-header py-3 mb-3">
            <div class="row flex-nowrap justify-content-between align-items-center">
                <div class="col-2 pt-1">
                    <a class="btn btn-sm btn-outline-primary align-middle" href="/"><i class="bi-arrow-left"></i></a>
                </div>
                <div class="col-8 text-center">
                    <div>
                        <h2><%= awayTeam.nickname %> <%= awayComp.score %> @ <%= homeTeam.nickname %> <%= homeComp.score %></h2>
                        <p class="text-small" id="game-date"></p>
                    </div>
                </div>
                <div class="col-2 d-flex justify-content-end align-items-center">
                    <a class="btn btn-sm btn-outline-secondary me-2" href="https://www.espn.com/college-football/game/_/gameId/<%= gameData.gameInfo.id %>">ESPN</a>
                    <a class="btn btn-sm btn-outline-secondary" href="/cfb/game/<%= gameData.gameInfo.id %>?json=1">Raw JSON</a>
                </div>
            </div>
        </header>
    </div>
    <div class="container-fluid">
            <%
            function handleRates(item, teamInfo, baseKey, useSuffix, decimalPoints) {
                let finalTeamInfo = (teamInfo == null) ? gameData.matchup.team : teamInfo;
                let finalDecimalPoints = decimalPoints || 1;
                var result = ""
                

                // let DARK_MODE_COLOR_RAMP = [
                //     "#BF5AF2FF",
                //     "#CF83F5C0",
                //     "#DFACF880",
                //     "#EFD5FB64",
                //     "#FFFFFF00",
                //     "#FFFFFF00",
                //     "#CBF3D564",
                //     "#97E8AB80",
                //     "#63DC81C0",
                //     "#30D158FF"
                // ]
                let LIGHT_MODE_COLOR_RAMP = [
                    "#AF52DEFF",
                    "#C37DE6C0",
                    "#D7A8EE80",
                    "#EBD3F664",
                    "#FFFFFF00",
                    "#FFFFFF00",
                    "#CCF1D564",
                    "#99E3AC80",
                    "#66D582C0",
                    "#34C759FF"
                ]

                function generateColorRampValue(input, max, midColor, alpha) {
                    if (!input) {
                        return null;
                    }
                    let value = (parseFloat(max) - parseFloat(input)) / parseFloat(max)
                    let step = Math.round(value / 0.1)
                    let clampedStep = Math.min(Math.max(step, 0), 9)
  
                    let hex = null
                    if (clampedStep == 4 || clampedStep == 5) {
                        return null
                    } else {
                        hex = LIGHT_MODE_COLOR_RAMP[clampedStep]
                    }
                    
                    if (alpha && hex) {
                        return hex.substring(0, hex.length - 2) + alpha.toString(16)
                    } else if (hex) {
                        return hex
                    } else {
                        return null
                    }
                }

                function produceNumerals(valueFormatter, isMargin) {
                    finalTeamInfo.forEach(teamData => {
                        let val = teamData[baseKey][item] || 0;
                        let rank = teamData[baseKey][`${item}Rank`]
                        let colorClass = null;
                        let colorText = null;
                        let sign = "";

                        if (isMargin) {
                            if (val > 0) {
                                colorClass = " hulk-green"
                                sign = "+"
                            } else if (val < 0) {
                                colorClass = " hulk-purple"
                            } else {
                                colorClass = null
                            }
                            colorText = null;
                        } else {
                            colorClass = null
                            colorText = generateColorRampValue(rank, 130, null, 255);
                        }
                        
                        let rankString = rank ? ` (#${rank})` : ""

                        if (colorClass) {
                            result += `<td class="numeral${colorClass}" style="text-align: center;">${sign}${valueFormatter(val)}${rankString}</td>`;
                        } else if (colorText) {
                            result += `<td class="numeral" style="text-align: center; color:${colorText};">${sign}${valueFormatter(val)}${rankString}</td>`;
                        } else {
                            result += `<td class="numeral" style="text-align: center;">${sign}${valueFormatter(val)}${rankString}</td>`;
                        }
                    });
                }

                if (item.includes("startingFP")) {
                    produceNumerals((value) => {
                        if (baseKey.includes("differential")) {
                            return `${roundNumber(parseFloat(value), 2, 0)}`;
                        } else {
                            let prefix = (value >= 50) ? "Own" : "Opp"
                            let printedVal = (value >= 50) ? (100 - parseFloat(value)) : value
                            return `${prefix} ${roundNumber(printedVal, 2, 0)}`;
                        }
                    }, baseKey.includes("differential"))
                } else if (item.toLocaleLowerCase().includes("epa")) {
                    produceNumerals((value) => `${roundNumber(parseFloat(value), 2, 2)}`, baseKey.includes("differential"))
                } else if (item.includes("success")) {
                    produceNumerals((value) => `${roundNumber(parseFloat(value * 100), 2, 1)}%`, baseKey.includes("differential"))
                } else { 
                    produceNumerals((value) => `${roundNumber(parseFloat(value), 2, 0)}`, baseKey.includes("differential"))
                }
                return result;
            }

            Object.keys(gameData.matchup).forEach(key => {
                const baseData = gameData.matchup[key]
                var teamKey = "pos_team"

                baseData.sort((a,b) => {
                    if (a[teamKey] == awayTeam.id && b[teamKey] == homeTeam.id) {
                        return -1;
                    } else if (b[teamKey] == awayTeam.id && a[teamKey] == homeTeam.id) {
                        return 1;
                    } else {
                        return 0;
                    }
                });
            });
        %>

        
        <div id="team-stats" class="row mb-3">
            <div class="col-md-12 ms-sm-auto col-lg-12 px-md-4">
                <h2 id="team-stats" class="d-inline">Matchup</h2>
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div id="boxScoreContent" class="panel-collapse show">
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-4 ms-sm-auto col-lg-4">
                                        <div class="table-responsive">
                                            <% var columns = [
                                                "totalPlays","playsPerGame","totalEPA","epaPerPlay","epaPerGame","successRate","startingFP"
                                            ]; %>
                                            <table class="table table-sm table-responsive">
                                                <thead>
                                                    <tr>
                                                        <th style="text-align: left;">Offensive</th>
                                                        <% gameData.matchup.team.map(group => group.teamId).forEach(value => { %>
                                                            <th style="text-align: center;"><img class="img-fluid" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/<%= (value == homeTeam.id) ? homeTeam.id : awayTeam.id %>.png" alt="ESPN team id <%= value %>"/></th>
                                                        <% }); %>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% columns.forEach(item => { %>
                                                        <tr>
                                                            <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                            <%- handleRates(item, gameData.matchup.team, 'offensive', true, 2); %>
                                                        </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                    <div class="col-md-4 ms-sm-auto col-lg-4">
                                        <div class="table-responsive">
                                            <% var columns = [
                                                "totalPlays","playsPerGame","totalEPA","epaPerPlay","epaPerGame","successRate","startingFP"
                                            ]; 
                                            %>
                                            <table class="table table-sm table-responsive">
                                                <thead>
                                                    <tr>
                                                        <th class="box-heading">Defensive</th>
                                                        <% gameData.matchup.team.map(group => group.teamId).forEach(value => { %>
                                                            <th style="text-align: center;"><img class="img-fluid" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/<%= (value == homeTeam.id) ? homeTeam.id : awayTeam.id %>.png" alt="ESPN team id <%= value %>"/></th>
                                                        <% }); %>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% columns.forEach(item => { %>
                                                        <tr>
                                                            <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                            <%- handleRates(item, gameData.matchup.team, 'defensive', true, 2); %>
                                                        </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="col-md-4 ms-sm-auto col-lg-4">
                                        <div class="table-responsive">
                                            <% var columns = [
                                                "totalEPA","epaPerPlay","epaPerGame","successRate","startingFP"
                                            ]; 
                                            %>
                                            <table class="table table-sm table-responsive">
                                                <thead>
                                                    <tr>
                                                        <th class="box-heading">Margins</th>
                                                        <% gameData.matchup.team.map(group => group.teamId).forEach(value => { %>
                                                            <th style="text-align: center;"><img class="img-fluid" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/<%= (value == homeTeam.id) ? homeTeam.id : awayTeam.id %>.png" alt="ESPN team id <%= value %>"/></th>
                                                        <% }); %>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% columns.forEach(item => { %>
                                                        <tr>
                                                            <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                            <%- handleRates(item, gameData.matchup.team, 'differential', true, 2); %>
                                                        </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- <div id="content">

    </div> -->
    <%- include('../../partials/footer') %>
    <%- include('../../partials/scripts') %>        
    <script src="/assets/js/feather.min.js" crossorigin="anonymous"></script>
    <script src="/assets/js/Chart.min.js" crossorigin="anonymous"></script>
    <script>
        const DateTime = luxon.DateTime;
        var gameData = <%- JSON.stringify(gameData) %>;
        // document.body.querySelector("#content").innerHTML = "<pre>" + JSON.stringify(gameData, null, 2) +  "</pre>";

        var statusDetail = gameData.gameInfo.status.type.detail;
        if (gameData.gameInfo.status.type.completed == true || statusDetail.includes("Cancel") || statusDetail.includes("Postpone")) {
            document.body.querySelector("#game-date").innerText = statusDetail + " - " + DateTime.fromISO(gameData.gameInfo.date).toLocaleString(DateTime.DATETIME_FULL);
        } else {
            var airings = gameData.gameInfo.airings;
            var airingLink = (airings != null && airings.length > 0) ? airings[0].webAiringLink : null
            let airingNetwork = (airings != null && airings.length > 0) ? ` (${airings[0].network_shortName || airings[0].network_displayName})` : ""
            if (airingLink != null) {
                document.body.querySelector("#game-date").innerHTML = `<a href="${airingLink}">LIVE</a>${airingNetwork} - ${statusDetail}`
            } else if (statusDetail.includes("TBD")) {
                document.body.querySelector("#game-date").innerText = "Scheduled - " + statusDetail
            } else {
                document.body.querySelector("#game-date").innerText = "LIVE - " + statusDetail
            }
        }
    </script>
</body>
</html>